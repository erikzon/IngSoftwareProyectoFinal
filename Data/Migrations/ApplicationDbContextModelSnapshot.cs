// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using proyectoIngSoftware.Data;

#nullable disable

namespace proyectoIngSoftware.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("proyectoIngSoftware.Models.Accesos", b =>
                {
                    b.Property<int>("IdAcceso")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID_ACCESO");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdAcceso"));

                    b.Property<string>("Descripcion")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("DESCRIPCION");

                    b.Property<int?>("IdEstacion")
                        .HasColumnType("int")
                        .HasColumnName("ID_ESTACION");

                    b.HasKey("IdAcceso");

                    b.HasIndex("IdEstacion");

                    b.ToTable("accesos");
                });

            modelBuilder.Entity("proyectoIngSoftware.Models.Buses", b =>
                {
                    b.Property<int>("IdBus")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID_BUS");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdBus"));

                    b.Property<int?>("Capacidad")
                        .HasColumnType("int")
                        .HasColumnName("CAPACIDAD");

                    b.Property<int?>("IdLinea")
                        .HasColumnType("int")
                        .HasColumnName("ID_LINEA");

                    b.Property<int?>("IdParqueo")
                        .HasColumnType("int")
                        .HasColumnName("ID_PARQUEO");

                    b.HasKey("IdBus");

                    b.HasIndex("IdLinea");

                    b.HasIndex("IdParqueo");

                    b.ToTable("buses");
                });

            modelBuilder.Entity("proyectoIngSoftware.Models.Empleados", b =>
                {
                    b.Property<int>("IdEmpleado")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID_EMPLEADO");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdEmpleado"));

                    b.Property<string>("Direccion")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("DIRECCION");

                    b.Property<int?>("IdPuesto")
                        .HasColumnType("int")
                        .HasColumnName("ID_PUESTO");

                    b.Property<string>("Nombre")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("NOMBRE");

                    b.Property<string>("Telefono")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("TELEFONO");

                    b.HasKey("IdEmpleado");

                    b.HasIndex("IdPuesto");

                    b.ToTable("empleados");
                });

            modelBuilder.Entity("proyectoIngSoftware.Models.EstacionLinea", b =>
                {
                    b.Property<int>("IdEstacion")
                        .HasColumnType("int")
                        .HasColumnName("ID_ESTACION");

                    b.Property<int>("IdLinea")
                        .HasColumnType("int")
                        .HasColumnName("ID_LINEA");

                    b.Property<double?>("DistanciaSiguiente")
                        .HasColumnType("float")
                        .HasColumnName("DISTANCIA_SIGUIENTE");

                    b.Property<int?>("Orden")
                        .HasColumnType("int")
                        .HasColumnName("ORDEN");

                    b.HasKey("IdEstacion", "IdLinea");

                    b.HasIndex("IdLinea");

                    b.ToTable("estacion_linea");
                });

            modelBuilder.Entity("proyectoIngSoftware.Models.Estaciones", b =>
                {
                    b.Property<int>("IdEstacion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID_ESTACION");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdEstacion"));

                    b.Property<string>("Direccion")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("DIRECCION");

                    b.Property<int?>("IdMunicipalidad")
                        .HasColumnType("int")
                        .HasColumnName("ID_MUNICIPALIDAD");

                    b.Property<string>("Nombre")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("NOMBRE");

                    b.HasKey("IdEstacion");

                    b.HasIndex("IdMunicipalidad");

                    b.ToTable("estaciones");
                });

            modelBuilder.Entity("proyectoIngSoftware.Models.Lineas", b =>
                {
                    b.Property<int>("IdLinea")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID_LINEA");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdLinea"));

                    b.Property<double?>("Longitud")
                        .HasColumnType("float")
                        .HasColumnName("LONGITUD");

                    b.Property<string>("Nombre")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("NOMBRE");

                    b.HasKey("IdLinea");

                    b.ToTable("lineas");
                });

            modelBuilder.Entity("proyectoIngSoftware.Models.Municipalidades", b =>
                {
                    b.Property<int>("IdMunicipalidad")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID_MUNICIPALIDAD");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdMunicipalidad"));

                    b.Property<string>("Direccion")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("DIRECCION");

                    b.Property<string>("Nombre")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("NOMBRE");

                    b.HasKey("IdMunicipalidad");

                    b.ToTable("municipalidades");
                });

            modelBuilder.Entity("proyectoIngSoftware.Models.Parqueos", b =>
                {
                    b.Property<int>("IdParqueo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID_PARQUEO");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdParqueo"));

                    b.Property<int?>("Capacidad")
                        .HasColumnType("int")
                        .HasColumnName("CAPACIDAD");

                    b.Property<string>("Ubicacion")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("UBICACION");

                    b.HasKey("IdParqueo");

                    b.ToTable("parqueos");
                });

            modelBuilder.Entity("proyectoIngSoftware.Models.Puestos", b =>
                {
                    b.Property<int>("IdPuesto")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID_PUESTO");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdPuesto"));

                    b.Property<string>("Descripcion")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("DESCRIPCION");

                    b.Property<string>("Nombre")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("NOMBRE");

                    b.HasKey("IdPuesto");

                    b.ToTable("puestos");
                });

            modelBuilder.Entity("proyectoIngSoftware.Models.TurnosBus", b =>
                {
                    b.Property<int>("IdTurno")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID_TURNO");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdTurno"));

                    b.Property<DateTime?>("FechaFin")
                        .HasColumnType("datetime")
                        .HasColumnName("FECHA_FIN");

                    b.Property<DateTime?>("FechaInicio")
                        .HasColumnType("datetime")
                        .HasColumnName("FECHA_INICIO");

                    b.Property<int?>("IdBus")
                        .HasColumnType("int")
                        .HasColumnName("ID_BUS");

                    b.Property<int?>("IdEmpleado")
                        .HasColumnType("int")
                        .HasColumnName("ID_EMPLEADO");

                    b.HasKey("IdTurno");

                    b.HasIndex("IdBus");

                    b.HasIndex("IdEmpleado");

                    b.ToTable("turnos_bus");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("proyectoIngSoftware.Models.Accesos", b =>
                {
                    b.HasOne("proyectoIngSoftware.Models.Estaciones", "IdEstacionNavigation")
                        .WithMany("Accesos")
                        .HasForeignKey("IdEstacion");

                    b.Navigation("IdEstacionNavigation");
                });

            modelBuilder.Entity("proyectoIngSoftware.Models.Buses", b =>
                {
                    b.HasOne("proyectoIngSoftware.Models.Lineas", "IdLineaNavigation")
                        .WithMany("Buses")
                        .HasForeignKey("IdLinea");

                    b.HasOne("proyectoIngSoftware.Models.Parqueos", "IdParqueoNavigation")
                        .WithMany("Buses")
                        .HasForeignKey("IdParqueo");

                    b.Navigation("IdLineaNavigation");

                    b.Navigation("IdParqueoNavigation");
                });

            modelBuilder.Entity("proyectoIngSoftware.Models.Empleados", b =>
                {
                    b.HasOne("proyectoIngSoftware.Models.Puestos", "IdPuestoNavigation")
                        .WithMany("Empleados")
                        .HasForeignKey("IdPuesto");

                    b.Navigation("IdPuestoNavigation");
                });

            modelBuilder.Entity("proyectoIngSoftware.Models.EstacionLinea", b =>
                {
                    b.HasOne("proyectoIngSoftware.Models.Estaciones", "IdEstacionNavigation")
                        .WithMany("EstacionLinea")
                        .HasForeignKey("IdEstacion")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("proyectoIngSoftware.Models.Lineas", "IdLineaNavigation")
                        .WithMany("EstacionLinea")
                        .HasForeignKey("IdLinea")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("IdEstacionNavigation");

                    b.Navigation("IdLineaNavigation");
                });

            modelBuilder.Entity("proyectoIngSoftware.Models.Estaciones", b =>
                {
                    b.HasOne("proyectoIngSoftware.Models.Municipalidades", "IdMunicipalidadNavigation")
                        .WithMany("Estaciones")
                        .HasForeignKey("IdMunicipalidad");

                    b.Navigation("IdMunicipalidadNavigation");
                });

            modelBuilder.Entity("proyectoIngSoftware.Models.TurnosBus", b =>
                {
                    b.HasOne("proyectoIngSoftware.Models.Buses", "IdBusNavigation")
                        .WithMany("TurnosBus")
                        .HasForeignKey("IdBus");

                    b.HasOne("proyectoIngSoftware.Models.Empleados", "IdEmpleadoNavigation")
                        .WithMany("TurnosBus")
                        .HasForeignKey("IdEmpleado");

                    b.Navigation("IdBusNavigation");

                    b.Navigation("IdEmpleadoNavigation");
                });

            modelBuilder.Entity("proyectoIngSoftware.Models.Buses", b =>
                {
                    b.Navigation("TurnosBus");
                });

            modelBuilder.Entity("proyectoIngSoftware.Models.Empleados", b =>
                {
                    b.Navigation("TurnosBus");
                });

            modelBuilder.Entity("proyectoIngSoftware.Models.Estaciones", b =>
                {
                    b.Navigation("Accesos");

                    b.Navigation("EstacionLinea");
                });

            modelBuilder.Entity("proyectoIngSoftware.Models.Lineas", b =>
                {
                    b.Navigation("Buses");

                    b.Navigation("EstacionLinea");
                });

            modelBuilder.Entity("proyectoIngSoftware.Models.Municipalidades", b =>
                {
                    b.Navigation("Estaciones");
                });

            modelBuilder.Entity("proyectoIngSoftware.Models.Parqueos", b =>
                {
                    b.Navigation("Buses");
                });

            modelBuilder.Entity("proyectoIngSoftware.Models.Puestos", b =>
                {
                    b.Navigation("Empleados");
                });
#pragma warning restore 612, 618
        }
    }
}
